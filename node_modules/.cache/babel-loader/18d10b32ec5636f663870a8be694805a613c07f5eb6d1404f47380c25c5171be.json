{"ast":null,"code":"var _jsxFileName = \"/home/nicolasrouger/code/react-app-portfolio/src/components/TypingEffect.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles/TypingEffect.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingEffect = _ref => {\n  _s();\n  let {\n    text,\n    subtitle,\n    className\n  } = _ref;\n  const [currentText, setCurrentText] = useState('');\n  const [isTypingComplete, setIsTypingComplete] = useState(false);\n  const [showSubtitle, setShowSubtitle] = useState(false);\n  useEffect(() => {\n    let isMounted = true;\n    let index = 0;\n    const typeText = () => {\n      if (isMounted) {\n        if (index < text.length) {\n          setCurrentText(prevText => prevText + text.charAt(index));\n          index++;\n          setTimeout(typeText, 300); // Adjust typing speed (milliseconds)\n        } else {\n          setIsTypingComplete(true); // Mark typing as complete\n        }\n      }\n    };\n\n    if (!isTypingComplete) {\n      setTimeout(() => {\n        typeText();\n      }, 1000); // Add a delay of 1000ms (1 second) before the typing effect starts\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [text, isTypingComplete]);\n  console.log(\"Rendering TypingEffect with showSubtitle:\", showSubtitle);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing-effect\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: `typewriter ${className}`,\n      style: {\n        wordWrap: 'break-word'\n      },\n      children: [currentText, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"subtitle-90\",\n        children: subtitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 11\n  }, this);\n};\n_s(TypingEffect, \"U1aWWgZlEUaV36+ptXhky+UfQME=\");\n_c = TypingEffect;\nexport default TypingEffect;\nvar _c;\n$RefreshReg$(_c, \"TypingEffect\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TypingEffect","_ref","_s","text","subtitle","className","currentText","setCurrentText","isTypingComplete","setIsTypingComplete","showSubtitle","setShowSubtitle","isMounted","index","typeText","length","prevText","charAt","setTimeout","console","log","children","style","wordWrap","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nicolasrouger/code/react-app-portfolio/src/components/TypingEffect.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles/TypingEffect.css';\n\nconst TypingEffect = ({ text, subtitle, className }) => {\n  const [currentText, setCurrentText] = useState('');\n  const [isTypingComplete, setIsTypingComplete] = useState(false);\n  const [showSubtitle, setShowSubtitle] = useState(false);\n\n  useEffect(() => {\n    let isMounted = true;\n    let index = 0;\n\n    const typeText = () => {\n      if (isMounted) {\n        if (index < text.length) {\n          setCurrentText(prevText => prevText + text.charAt(index));\n          index++;\n          setTimeout(typeText, 300); // Adjust typing speed (milliseconds)\n        } else {\n          setIsTypingComplete(true); // Mark typing as complete\n         \n        }\n      }\n    };\n\n    if (!isTypingComplete) {\n      setTimeout(() => {\n        typeText();\n      }, 1000); // Add a delay of 1000ms (1 second) before the typing effect starts\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [text, isTypingComplete]);\n\n  console.log(\"Rendering TypingEffect with showSubtitle:\", showSubtitle);\n\n  return  <div className=\"typing-effect\">\n            <h1 className={`typewriter ${className}`} style={{ wordWrap: 'break-word' }}>\n              {currentText}\n              <span className=\"subtitle-90\">{subtitle}</span>\n            </h1>\n          </div>\n};\n\nexport default TypingEffect;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGC,IAAA,IAAmC;EAAAC,EAAA;EAAA,IAAlC;IAAEC,IAAI;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EACjD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACd,IAAIgB,SAAS,GAAG,IAAI;IACpB,IAAIC,KAAK,GAAG,CAAC;IAEb,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAIF,SAAS,EAAE;QACb,IAAIC,KAAK,GAAGV,IAAI,CAACY,MAAM,EAAE;UACvBR,cAAc,CAACS,QAAQ,IAAIA,QAAQ,GAAGb,IAAI,CAACc,MAAM,CAACJ,KAAK,CAAC,CAAC;UACzDA,KAAK,EAAE;UACPK,UAAU,CAACJ,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QAC7B,CAAC,MAAM;UACLL,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7B;MACF;IACF,CAAC;;IAED,IAAI,CAACD,gBAAgB,EAAE;MACrBU,UAAU,CAAC,MAAM;QACfJ,QAAQ,CAAC,CAAC;MACZ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;;IAEA,OAAO,MAAM;MACXF,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,CAACT,IAAI,EAAEK,gBAAgB,CAAC,CAAC;EAE5BW,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEV,YAAY,CAAC;EAEtE,oBAAQX,OAAA;IAAKM,SAAS,EAAC,eAAe;IAAAgB,QAAA,eAC5BtB,OAAA;MAAIM,SAAS,EAAG,cAAaA,SAAU,EAAE;MAACiB,KAAK,EAAE;QAAEC,QAAQ,EAAE;MAAa,CAAE;MAAAF,QAAA,GACzEf,WAAW,eACZP,OAAA;QAAMM,SAAS,EAAC,aAAa;QAAAgB,QAAA,EAAEjB;MAAQ;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAChB,CAAC;AAACzB,EAAA,CAzCIF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AA2ClB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}