{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import '../styles/TypingEffect.css';\n\n// const TypingEffect = ({ text, className }) => {\n//   const [currentText, setCurrentText] = useState('');\n//   const [startTyping, setStartTyping] = useState(false);\n\n//   useEffect(() => {\n//     let isMounted = true;\n//     let index = 0;\n\n//     const typeText = () => {\n//       if (isMounted && startTyping && text && index < text.length) {\n//         setCurrentText(prevText => prevText + text.charAt(index));\n//         index++;\n//         setTimeout(typeText, 100); // Adjust typing speed (milliseconds)\n//       } else if (index === text.length) {\n//         setStartTyping(true); // Stop typing effect once the text is fully displayed\n//       }\n//     };\n\n//     const startTypingEffect = () => {\n//       setTimeout(() => {\n//         setStartTyping(true);\n//       }, 1000); // Add a delay of 1000ms (1 second) before the typing effect starts\n//     };\n\n//     startTypingEffect();\n//     typeText(); // Initiate the typing effect after the delay\n\n//     return () => {\n//       isMounted = false;\n//     };\n//   }, [text, startTyping]);\n\n//   return <h1 className={`typewriter ${className}`}>{currentText}</h1>;\n// };\n\n// TypingEffect.defaultProps = {\n//   text: '', // Provide a default value for the 'text' prop to prevent issues\n// };\n\n// export default TypingEffect;","map":{"version":3,"names":[],"sources":["/home/nicolasrouger/code/react-app-portfolio/src/components/TypingEffect.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import '../styles/TypingEffect.css';\n\n// const TypingEffect = ({ text, className }) => {\n//   const [currentText, setCurrentText] = useState('');\n//   const [startTyping, setStartTyping] = useState(false);\n\n//   useEffect(() => {\n//     let isMounted = true;\n//     let index = 0;\n\n//     const typeText = () => {\n//       if (isMounted && startTyping && text && index < text.length) {\n//         setCurrentText(prevText => prevText + text.charAt(index));\n//         index++;\n//         setTimeout(typeText, 100); // Adjust typing speed (milliseconds)\n//       } else if (index === text.length) {\n//         setStartTyping(true); // Stop typing effect once the text is fully displayed\n//       }\n//     };\n\n//     const startTypingEffect = () => {\n//       setTimeout(() => {\n//         setStartTyping(true);\n//       }, 1000); // Add a delay of 1000ms (1 second) before the typing effect starts\n//     };\n\n//     startTypingEffect();\n//     typeText(); // Initiate the typing effect after the delay\n\n//     return () => {\n//       isMounted = false;\n//     };\n//   }, [text, startTyping]);\n\n//   return <h1 className={`typewriter ${className}`}>{currentText}</h1>;\n// };\n\n// TypingEffect.defaultProps = {\n//   text: '', // Provide a default value for the 'text' prop to prevent issues\n// };\n\n// export default TypingEffect;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}