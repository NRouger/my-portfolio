{"ast":null,"code":"var _jsxFileName = \"/home/nicolasrouger/code/react-app-portfolio/src/components/TypingEffect.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/TypingEffect.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingEffect = _ref => {\n  _s();\n  let {\n    title,\n    subtitle,\n    className\n  } = _ref;\n  const [currentText, setCurrentText] = useState('');\n  const [isTypingComplete, setIsTypingComplete] = useState(false);\n  const [showSubtitle, setShowSubtitle] = useState(false);\n  useEffect(() => {\n    let isMounted = true;\n    let index = 0;\n    const typeText = () => {\n      if (isMounted) {\n        if (index < title.length) {\n          setCurrentText(prevText => prevText + title.charAt(index));\n          index++;\n          setTimeout(typeText, 300); // Adjust typing speed (milliseconds)\n        } else {\n          setIsTypingComplete(true); // Mark typing as complete\n          console.log(\"Typing complete. Showing subtitle...\");\n          setTimeout(() => {\n            setShowSubtitle(true); // Show subtitle after typing effect\n          }, 500); // Adjust delay as needed\n        }\n      }\n    };\n\n    if (!isTypingComplete) {\n      setTimeout(() => {\n        typeText();\n      }, 1000); // Add a delay of 1000ms (1 second) before the typing effect starts\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [title, isTypingComplete]);\n  console.log(\"Rendering TypingEffect with showSubtitle:\", showSubtitle);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `typing-effect ${className}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: currentText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), showSubtitle && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"subtitle\",\n      children: subtitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingEffect, \"U1aWWgZlEUaV36+ptXhky+UfQME=\");\n_c = TypingEffect;\nexport default TypingEffect;\nvar _c;\n$RefreshReg$(_c, \"TypingEffect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TypingEffect","_ref","_s","title","subtitle","className","currentText","setCurrentText","isTypingComplete","setIsTypingComplete","showSubtitle","setShowSubtitle","isMounted","index","typeText","length","prevText","charAt","setTimeout","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nicolasrouger/code/react-app-portfolio/src/components/TypingEffect.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/TypingEffect.css';\n\nconst TypingEffect = ({ title, subtitle, className }) => {\n  const [currentText, setCurrentText] = useState('');\n  const [isTypingComplete, setIsTypingComplete] = useState(false);\n  const [showSubtitle, setShowSubtitle] = useState(false);\n\n  useEffect(() => {\n    let isMounted = true;\n    let index = 0;\n\n    const typeText = () => {\n      if (isMounted) {\n        if (index < title.length) {\n          setCurrentText(prevText => prevText + title.charAt(index));\n          index++;\n          setTimeout(typeText, 300); // Adjust typing speed (milliseconds)\n        } else {\n          setIsTypingComplete(true); // Mark typing as complete\n          console.log(\"Typing complete. Showing subtitle...\");\n          setTimeout(() => {\n            setShowSubtitle(true); // Show subtitle after typing effect\n          }, 500); // Adjust delay as needed\n        }\n      }\n    };\n\n    if (!isTypingComplete) {\n      setTimeout(() => {\n        typeText();\n      }, 1000); // Add a delay of 1000ms (1 second) before the typing effect starts\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [title, isTypingComplete]);\n\n  console.log(\"Rendering TypingEffect with showSubtitle:\", showSubtitle);\n\n  return (\n    <div className={`typing-effect ${className}`}>\n      <h1 className=\"title\">{currentText}</h1>\n      {showSubtitle && <span className=\"subtitle\">{subtitle}</span>}\n    </div>\n  );\n};\n\nexport default TypingEffect;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGC,IAAA,IAAoC;EAAAC,EAAA;EAAA,IAAnC;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EAClD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,IAAIe,SAAS,GAAG,IAAI;IACpB,IAAIC,KAAK,GAAG,CAAC;IAEb,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAIF,SAAS,EAAE;QACb,IAAIC,KAAK,GAAGV,KAAK,CAACY,MAAM,EAAE;UACxBR,cAAc,CAACS,QAAQ,IAAIA,QAAQ,GAAGb,KAAK,CAACc,MAAM,CAACJ,KAAK,CAAC,CAAC;UAC1DA,KAAK,EAAE;UACPK,UAAU,CAACJ,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QAC7B,CAAC,MAAM;UACLL,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;UAC3BU,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;UACnDF,UAAU,CAAC,MAAM;YACfP,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;UACzB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACX;MACF;IACF,CAAC;;IAED,IAAI,CAACH,gBAAgB,EAAE;MACrBU,UAAU,CAAC,MAAM;QACfJ,QAAQ,CAAC,CAAC;MACZ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;;IAEA,OAAO,MAAM;MACXF,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,CAACT,KAAK,EAAEK,gBAAgB,CAAC,CAAC;EAE7BW,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEV,YAAY,CAAC;EAEtE,oBACEX,OAAA;IAAKM,SAAS,EAAG,iBAAgBA,SAAU,EAAE;IAAAgB,QAAA,gBAC3CtB,OAAA;MAAIM,SAAS,EAAC,OAAO;MAAAgB,QAAA,EAAEf;IAAW;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACvCf,YAAY,iBAAIX,OAAA;MAAMM,SAAS,EAAC,UAAU;MAAAgB,QAAA,EAAEjB;IAAQ;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAACvB,EAAA,CA5CIF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}